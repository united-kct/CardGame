// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Common.MasterData
{
    public sealed class CardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Common.MasterData.Card>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Power
        private static global::System.ReadOnlySpan<byte> GetSpan_Power() => new byte[1 + 5] { 165, 80, 111, 119, 101, 114 };
        // Hand
        private static global::System.ReadOnlySpan<byte> GetSpan_Hand() => new byte[1 + 4] { 164, 72, 97, 110, 100 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // ImageId
        private static global::System.ReadOnlySpan<byte> GetSpan_ImageId() => new byte[1 + 7] { 167, 73, 109, 97, 103, 101, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Common.MasterData.Card value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Power());
            writer.Write(value.Power);
            writer.WriteRaw(GetSpan_Hand());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Common.MasterData.CardHand>(formatterResolver).Serialize(ref writer, value.Hand, options);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Common.MasterData.CardType>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_ImageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ImageId, options);
        }

        public global::Common.MasterData.Card Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(string);
            var __Power__ = default(int);
            var __Hand__ = default(global::Common.MasterData.CardHand);
            var __Type__ = default(global::Common.MasterData.CardType);
            var __ImageId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 491328597840UL) { goto FAIL; }

                        __Power__ = reader.ReadInt32();
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1684955464UL:
                                __Hand__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Common.MasterData.CardHand>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701869908UL:
                                __Type__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Common.MasterData.CardType>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197546028361UL) { goto FAIL; }

                        __ImageId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Common.MasterData.Card(__Id__, __Power__, __Hand__, __Type__, __ImageId__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
